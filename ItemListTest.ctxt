#BlueJ class context
comment0.target=ItemListTest
comment0.text=\n\ Test\ class\ for\ {@link\ ItemList}.\n\ \n\ @author\ Jackson\ Eshbaugh\n\ @version\ 05/03/2024\n
comment1.params=
comment1.target=ItemListTest()
comment10.params=
comment10.target=void\ testSize()
comment10.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#size()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ an\ empty\ list's\ size.</li>\n\ \ \ <li>Tests\ a\ list's\ size\ after\ adding\ some\ elements.</li>\n\ \ \ <li>Tests\ a\ list's\ size\ after\ expanding,\ then\ shortening\ the\ array.</li>\n\ </ol>\n
comment11.params=
comment11.target=void\ testAdd()
comment11.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#add(int)}\ and\ {@link\ ItemList<Integer>\#add(int,\ int)}\n\ methods\:\n\ <ol>\n\ \ \ <li>Tests\ appending\ to\ the\ list.</li>\n\ \ \ <li>Tests\ prepending\ to\ the\ list.</li>\n\ \ \ <li>Tests\ adding\ to\ the\ middle\ of\ the\ list.</li>\n\ \ \ <li>Tests\ an\ index\ too\ low\ and\ too\ high\ for\ the\ list.</li>\n\ </ol>\n
comment12.params=
comment12.target=void\ testRemove()
comment12.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#remove(int)}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ removing\ a\ value\ from\ the\ end\ of\ the\ list.</li>\n\ \ \ <li>Tests\ removing\ a\ value\ from\ the\ beginning\ the\ list.</li>\n\ \ \ <li>Tests\ removing\ a\ value\ from\ the\ middle\ of\ the\ list.</li>\n\ \ \ <li>Tests\ removing\ using\ an\ index\ above\ the\ boundary\ of\ the\ list.</li>\n\ \ \ <li>Tests\ removing\ using\ an\ index\ below\ the\ boundary\ of\ the\ list.</li>\n\ </ol>\n
comment13.params=
comment13.target=void\ testArraySize()
comment13.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#array_size()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ a\ newly\ created\ array.</li>\n\ \ \ <li>Tests\ an\ array\ that\ has\ been\ resized\ to\ be\ larger.</li>\n\ \ \ <li>Tests\ an\ array\ that\ has\ been\ resized\ to\ be\ smaller.</li>\n\ </ol>\n\ \n\ <i>The\ success\ of\ this\ test\ implies\ that\ the\ {@code\ private}\n\ {@link\ ItemList<Integer>\#resize(int)}\ method\ is\ also\ functioning\n\ correctly.</i>\n
comment14.params=
comment14.target=void\ testEmptyCount()
comment14.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#empty_cnt()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ a\ newly\ created\ array's\ count\ of\ empty\ cells\ (should\ be\ {@code\ 10}).</li>\n\ \ \ <li>Tests\ an\ array\ that\ has\ been\ resized\ to\ be\ larger.</li>\n\ \ \ <li>Tests\ an\ array\ that\ has\ been\ resized\ to\ be\ smaller.</li>\n\ </ol>\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\n\ Called\ before\ each\ test.\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\n\ Called\ after\ each\ test.\n
comment4.params=
comment4.target=void\ testReset()
comment4.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#reset()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ resetting\ the\ {@code\ counter}.</li>\n\ </ol>\n
comment5.params=
comment5.target=void\ testNext()
comment5.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#next()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ when\ the\ {@code\ counter}\ is\ {@code\ 0}\ and\ the\ list\ is\ {@code\ 0}\ long.</li>\n\ \ \ <li>Tests\ when\ the\ {@code\ counter}\ is\ within\ the\ list's\ range.</li>\n\ \ \ <li>Tests\ when\ the\ {@code\ counter}\ is\ too\ large.</li>\n\ \ \ <li>Tests\ when\ an\ element\ is\ added\ to\ the\ index\ next\ to\ the\ counter.</li>\n\ \ \ <li>Tests\ when\ an\ element\ is\ removed\ at\ the\ index\ next\ to\ the\ counter.</li>\n\ \ \ <li>Tests\ when\ an\ element\ is\ added\ to\ the\ index\ the\ counter\ points\ to.</li>\n\ \ \ <li>Tests\ when\ an\ element\ is\ removed\ at\ the\ index\ the\ counter\ points\ to.</li>\n\ </ol>\n
comment6.params=
comment6.target=void\ testToString()
comment6.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#toString()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ an\ empty\ list.</li>\n\ \ \ <li>Tests\ appending,\ prepending,\ and\ adding\ elements\ to\ the\ middle.</li>\n\ \ \ <li>Tests\ removing\ some\ elements.</li>\n\ </ol>\n
comment7.params=
comment7.target=void\ testGet()
comment7.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#get(int)}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ an\ {@code\ index}\ too\ large\ for\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ too\ small\ for\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ within\ the\ list's\ boundaries.</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ at\ the\ beginning\ the\ list's\ boundary\ (i.e.,\ {@code\ 0}).</li>\n\ \ \ <li>Tests\ an\ {@code\ index}\ at\ the\ end\ of\ the\ list's\ boundary\ (i.e.,\ {@link\ ItemList<Integer>\#size()}\ {@code\ -\ 1}).</li>\n\ </ol>\n
comment8.params=
comment8.target=void\ testClear()
comment8.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#clear()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ clearing\ an\ empty\ list.</li>\n\ \ \ <li>Tests\ clearing\ a\ list\ with\ some\ elements.</li>\n\ \ \ <li>Tests\ clearing\ a\ list\ that\ has\ been\ expanded.</li>\n\ \ \ <li>Tests\ clearing\ a\ list\ that\ has\ been\ shrunk.</li>\n\ </ol>\n
comment9.params=
comment9.target=void\ testIsEmpty()
comment9.text=\n\ Tests\ the\ {@link\ ItemList<Integer>\#isEmpty()}\ method\:\n\ <ol>\n\ \ \ <li>Tests\ an\ empty\ list.</li>\n\ \ \ <li>Tests\ a\ list\ after\ adding\ some\ elements.</li>\n\ \ \ <li>Tests\ a\ list\ after\ adding\ and\ removing\ elements.</li>\n\ </ol>\n
numComments=15
